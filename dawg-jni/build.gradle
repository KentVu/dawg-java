import org.gradle.internal.jvm.Jvm

/*
 * There is currently no "C application" plugin, so this build uses the "C++ application" plugin and then reconfigures it
 * to build C instead.
 */
plugins {
    id 'cpp-library'
}

group 'kentvu.dawgjava'
version = '0.0.1'

library {
    binaries.configureEach { CppBinary binary ->
        def compileTask = binary.compileTask.get()
        compileTask.dependsOn rootProject.executeSwig

        compileTask.includes.from("${Jvm.current().javaHome}/include")

        def osFamily = binary.targetPlatform.targetMachine.operatingSystemFamily
        if (osFamily.macOs) {
            compileTask.includes.from("${Jvm.current().javaHome}/include/darwin")
            //compileTask.includes.from("${System.properties['user.home']}/Library/Android/sdk//ndk/23.1.7779620/toolchains/llvm/prebuilt/darwin-x86_64/sysroot/usr/include/")
            compileTask.includes.from("/Library/Java/JavaVirtualMachines/jdk-17.0.2.jdk/Contents/Home/include")
            compileTask.includes.from("/Library/Java/JavaVirtualMachines/jdk-17.0.2.jdk/Contents/Home/include/darwin")
        } else if (osFamily.linux) {
            compileTask.includes.from("${Jvm.current().javaHome}/include/linux")
        } else if (osFamily.windows) {
            compileTask.includes.from("${Jvm.current().javaHome}/include/win32")
        }

        compileTask.source.from fileTree(dir: "src/main/cpp", include: "**/*.cpp")

        def toolChain = binary.toolChain
        if (toolChain instanceof VisualCpp) {
            compileTask.compilerArgs.addAll(["/TC"])
        } else if (toolChain instanceof GccCompatibleToolChain) {
            compileTask.compilerArgs.addAll(["-std=c++11", "-fPIC"])
        }
    }
}
